//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Cursor"",
            ""id"": ""6d2aba1d-9c96-4d58-940c-31648a1511d0"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""ba3b3f9a-d3c5-4348-a5e6-a48d7a9b49f7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""314a5dfd-a7c2-4c2a-a726-9e343f7a4b12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateItem"",
                    ""type"": ""Button"",
                    ""id"": ""ac0d1762-b544-45f6-80dc-f2d5853ad6f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelSelection"",
                    ""type"": ""Button"",
                    ""id"": ""394b90c9-fa8a-4805-9ba6-e93fe79af321"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""29b97dd0-f028-4f77-8f9c-43f8c885caac"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f35ba76d-2e40-429a-bd32-01672714ce8f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7323902-96ce-4236-9259-c73261c09700"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8cffd7c1-42b1-4683-b2d5-e10c82d75662"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2dd0ce24-1fa5-4807-9a11-6ee639464cb9"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameCamera"",
            ""id"": ""cc990641-eb96-43d4-b1f6-3c2f2ca30fe8"",
            ""actions"": [
                {
                    ""name"": ""RotateCamera"",
                    ""type"": ""Button"",
                    ""id"": ""b139c464-d2e6-41fd-9382-07dd727ff275"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""72cafac0-601d-413d-9dc5-228d3dddaec4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""925537e5-1f88-4c58-92b9-2cebd09f7ed4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""198f7317-40e8-4258-b7b6-ab3136c77564"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Cursor
        m_Cursor = asset.FindActionMap("Cursor", throwIfNotFound: true);
        m_Cursor_MousePosition = m_Cursor.FindAction("MousePosition", throwIfNotFound: true);
        m_Cursor_Select = m_Cursor.FindAction("Select", throwIfNotFound: true);
        m_Cursor_RotateItem = m_Cursor.FindAction("RotateItem", throwIfNotFound: true);
        m_Cursor_CancelSelection = m_Cursor.FindAction("CancelSelection", throwIfNotFound: true);
        // GameCamera
        m_GameCamera = asset.FindActionMap("GameCamera", throwIfNotFound: true);
        m_GameCamera_RotateCamera = m_GameCamera.FindAction("RotateCamera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cursor
    private readonly InputActionMap m_Cursor;
    private List<ICursorActions> m_CursorActionsCallbackInterfaces = new List<ICursorActions>();
    private readonly InputAction m_Cursor_MousePosition;
    private readonly InputAction m_Cursor_Select;
    private readonly InputAction m_Cursor_RotateItem;
    private readonly InputAction m_Cursor_CancelSelection;
    public struct CursorActions
    {
        private @Controls m_Wrapper;
        public CursorActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_Cursor_MousePosition;
        public InputAction @Select => m_Wrapper.m_Cursor_Select;
        public InputAction @RotateItem => m_Wrapper.m_Cursor_RotateItem;
        public InputAction @CancelSelection => m_Wrapper.m_Cursor_CancelSelection;
        public InputActionMap Get() { return m_Wrapper.m_Cursor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CursorActions set) { return set.Get(); }
        public void AddCallbacks(ICursorActions instance)
        {
            if (instance == null || m_Wrapper.m_CursorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CursorActionsCallbackInterfaces.Add(instance);
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @RotateItem.started += instance.OnRotateItem;
            @RotateItem.performed += instance.OnRotateItem;
            @RotateItem.canceled += instance.OnRotateItem;
            @CancelSelection.started += instance.OnCancelSelection;
            @CancelSelection.performed += instance.OnCancelSelection;
            @CancelSelection.canceled += instance.OnCancelSelection;
        }

        private void UnregisterCallbacks(ICursorActions instance)
        {
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @RotateItem.started -= instance.OnRotateItem;
            @RotateItem.performed -= instance.OnRotateItem;
            @RotateItem.canceled -= instance.OnRotateItem;
            @CancelSelection.started -= instance.OnCancelSelection;
            @CancelSelection.performed -= instance.OnCancelSelection;
            @CancelSelection.canceled -= instance.OnCancelSelection;
        }

        public void RemoveCallbacks(ICursorActions instance)
        {
            if (m_Wrapper.m_CursorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICursorActions instance)
        {
            foreach (var item in m_Wrapper.m_CursorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CursorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CursorActions @Cursor => new CursorActions(this);

    // GameCamera
    private readonly InputActionMap m_GameCamera;
    private List<IGameCameraActions> m_GameCameraActionsCallbackInterfaces = new List<IGameCameraActions>();
    private readonly InputAction m_GameCamera_RotateCamera;
    public struct GameCameraActions
    {
        private @Controls m_Wrapper;
        public GameCameraActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateCamera => m_Wrapper.m_GameCamera_RotateCamera;
        public InputActionMap Get() { return m_Wrapper.m_GameCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameCameraActions set) { return set.Get(); }
        public void AddCallbacks(IGameCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_GameCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameCameraActionsCallbackInterfaces.Add(instance);
            @RotateCamera.started += instance.OnRotateCamera;
            @RotateCamera.performed += instance.OnRotateCamera;
            @RotateCamera.canceled += instance.OnRotateCamera;
        }

        private void UnregisterCallbacks(IGameCameraActions instance)
        {
            @RotateCamera.started -= instance.OnRotateCamera;
            @RotateCamera.performed -= instance.OnRotateCamera;
            @RotateCamera.canceled -= instance.OnRotateCamera;
        }

        public void RemoveCallbacks(IGameCameraActions instance)
        {
            if (m_Wrapper.m_GameCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_GameCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameCameraActions @GameCamera => new GameCameraActions(this);
    public interface ICursorActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnRotateItem(InputAction.CallbackContext context);
        void OnCancelSelection(InputAction.CallbackContext context);
    }
    public interface IGameCameraActions
    {
        void OnRotateCamera(InputAction.CallbackContext context);
    }
}
